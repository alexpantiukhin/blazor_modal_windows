#pragma checksum "C:\Users\Alex\source\repos\blazor_modal_windows\ModalWindowAlertComponent\WindowAlert.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f8a297ed6efb6d291117ef3937135288ff1fc03c"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ModalWindowAlertComponent
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "C:\Users\Alex\source\repos\blazor_modal_windows\ModalWindowAlertComponent\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 2 "C:\Users\Alex\source\repos\blazor_modal_windows\ModalWindowAlertComponent\_Imports.razor"
using ModalWindowContainerComponent;

#line default
#line hidden
    public partial class WindowAlert : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 14 "C:\Users\Alex\source\repos\blazor_modal_windows\ModalWindowAlertComponent\WindowAlert.razor"
       
    [Parameter]
    public WindowAlertModel Model { get; set; }

    protected bool IsVisible { get; set; }
    protected RenderFragment Content { get; set; }

    protected override void OnInitialized()
    {
        _modalService.OnShow += ShowModal;
        _modalService.OnClose += CloseModal;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsVisible == false)
        {
            await _modalService.ClosedCall();
        }
        else
        {
            await _modalService.ShowedCall();
        }
    }

    public Task ShowModal(WindowAlertModel model)
    {
        Model = model;
        IsVisible = true;

        return InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public Task CloseModal()
    {
        IsVisible = false;
        Content = null;

        return InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        _modalService.OnShow -= ShowModal;
        _modalService.OnClose -= CloseModal;
    }

    void ClickOk()
    {
        Model.ActionOk?.Invoke();
        _modalService.Close().Wait();
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ModalWindowAlertComponent.WindowAlertServices _modalService { get; set; }
    }
}
#pragma warning restore 1591
